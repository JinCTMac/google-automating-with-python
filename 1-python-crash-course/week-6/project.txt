Project Details

About Jupyter Notebooks
We use codeblocks to write small snippets of code. We can use Jupyter Notebooks for Python, which is a special kind of document that contains pieces of code. The notebooks can also contain text, widgets and other things, allowing us to tell interactive stories with our code. We can run and edit our code in the web browser, and can also document/describe the code.

We execute the code by running or using command + enter.
Jupyter notebooks execute one by one, where we can execute each code block individually.

Resources on Jupyter Notebooks:
- https://www.datacamp.com/community/tutorials/tutorial-jupyter-notebook
- https://www.codecademy.com/article/how-to-use-jupyter-notebooks
- https://jupyter4edu.github.io/jupyter-edu-book/why-we-use-jupyter-notebooks.html#why-do-we-use-jupyter

Project Intro
Writing a script from the ground up

How do we break down a problem into smaller steps that we can solve?
Imagine we have a situation where we need to write a report telling us what users are using what machines at any given time. We need to figure out:

- What data we're using as input
- What data we're getting as output

We can work this out by looking at the rest of the system where our script will live, and look at the attributes that we're accessing and using for inputs. Our script receives event objects, and we access the event object attributes for the login and logout data, looking for the names of the users who have logged in. Ultimately, we need to look at event objects, getting date, user, machine and type details and then generate a report that logs all of those details.

Research
Figuring out how we go about doing this.
We have our problem statement, and focus our approach. We need to input a list of event objects, and then access the attributes. For example, with the login times, if a user is logged in, then haven't logged out, but if there is logout times, then they are no longer using the machine.

To sort a list, we can use the .sort() or .sorted() functions, where .sort() affects the list being input while sorted() creates a new function.

.sort() takes parameters, and one is a key, allowing us to sort by the length of the string, for example. We will order our event objects by date, so we can create our own function to sort the objects by date.

Planning the script
We've defined our problem statement and researched the tools we need to solve the problem. We know we've sorting event objects by time, telling us the machine name, users and login/logout times. When we process an event, if we see a login, we want to add it to the users logged in, and if its a logout we remove them. We can represent this as a set, and that as a dictionary, where the machines are the keys and the users are the values. We can then use another function to generate the report, taking the dictionary that we pass to it.

Separating functions is helpful when debugging or making other changes, as it keeps functions from getting ‘tangled’. It also makes it easier to adapt functions for other uses.
